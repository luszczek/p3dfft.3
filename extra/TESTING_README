Note for both scripts: Make sure you run them with python2 and NOT python3

**************
all_configs.py
**************
To create a set of configurations to test with, go to the parent directory of
your source directory, then run:
python [source directory]/extra/all_configs.py -s [platform]

The platform is the only mandatory option, and the available platforms are
comet, bridges, stampede, and summit.

You can also use the -h option to see the help menu.

This script will build a configuration folder in your current directory titled:
p3dfft++_configs_[time stamp]_[compiler]

Within this folder will be folders for all the possible permutations of builds
depending on the options in the "options" list in all_configs.py

Example: python p3dfft.3/extra/all_configs.py -s comet -c intel -f "FC=mpif90 CC=mpicc CXX=mpicxx"


**********
makejob.py
**********
This script will make a batch job script that runs all tests in the builds
generated by all_configs.py

To run the script use the following command from the parent directory of your
source directory (same as where you ran all_configs.py from):
python [source directory]/extra/makejob.py -s [platform] -d [configuration directory] -e [email] -a [non-default account]

Note that only the -s [platform] and -d [configuration directory] options are
required. The rest are optional but recommended.

You can see a full list of options by using the -h flag

Running this script will generate an output folder in the current directory
titled:
jobs_[time stamp]

Within this folder, you will find the batch job script and an empty "out"
folder. It is recommended that you start running the script from within
this "jobs_[time stamp]" folder.

All output files will be created within the "out" folder and a file called
"out.[job id]" will also be generated that will list errors and output not
put in the other output folders. If the script runs correctly it will run
the following command at the end:
grep -rcwE * -e 'Error|incorrect|BAD'

This command will search each file for the stated keywords and output the
number of occurences for each file in the "out.[job id]" file.
